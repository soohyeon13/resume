{"version":3,"sources":["components/component/Card.js","components/Profile.js","components/Career.js","components/Skill.js","components/Project.js","components/Presentation.js","components/Education.js","config.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","children","Profile","profileImg","undefined","githubAccountId","email","phone","description","github","src","alt","href","Object","prototype","toString","call","renderItem","item","index","key","name","duration","Career","careers","map","Skill","skills","contribution","images","etc","Project","projects","useState","fold","setFold","icon","iconDescription","onClick","Presentation","presentations","Education","educations","config","profile","App","Array","isArray","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25d0d49f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Card = props => {\n    const className = props.className ? `card ${props.className}` : 'card';\n    return (\n        <div className={className}>\n            {props.children}\n        </div>\n    )\n}\n\nCard.propTypes = {\n    className : PropTypes.string,\n    children : PropTypes.element,\n}\n\nexport default Card;","import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types';\nimport { GoMarkGithub } from 'react-icons/go'\nimport { IoIosMail, IoIosPhonePortrait } from 'react-icons/io';\nimport { Card } from './component';\n\nconst Profile = ({profileImg = undefined, githubAccountId = '', email = undefined, phone = undefined, description = \"\", github = \"\"}) => {\n    return (\n        <Card className=\"profile\">\n            <Fragment>\n                <div className=\"banner\">\n                    <div className=\"image-container\">\n                        {\n                            profileImg ? <img src={profileImg} alt=\"프로필 사진\"/>\n                            : <GoMarkGithub/>\n                        }\n                        \n                    </div>\n                    <span className=\"nickname\">{githubAccountId}</span>\n                    <div>\n                        \n                    </div>\n                    <div className=\"contact\">\n                        <ul>\n                            {github && <li><a href={`https://github.com/${githubAccountId}`}><GoMarkGithub />{github} </a></li>}\n                            {email && <li><IoIosMail />{email} </li>}\n                            {phone && <li><IoIosPhonePortrait /> {phone} </li>}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"description\">\n                    {Object.prototype.toString.call(description) === '[object String]' && description}\n                </div>\n            </Fragment>\n        </Card>\n    )\n}\n\nProfile.propTypes = {\n    profileImg: PropTypes.string,\n    githubAccountId: PropTypes.string,\n    email: PropTypes.string,\n    phone: PropTypes.string,\n    description: PropTypes.string,\n};\n\nexport default Profile;","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types';\nimport { Card } from './component';\n\n\nconst renderItem = (item, index) => (\n    <li key={index}>\n        <div className=\"language\">\n            <div>{item.name}</div> \n            <div>{item.duration}</div>\n        </div>\n        <div className=\"description\">{item.description}</div>\n    </li>\n)\n\nconst Career = ({careers = []}) => {\n    return (\n        <Card className=\"career\">\n            <Fragment>\n                <h2>Experience</h2>\n                <ul>\n                    {careers.map(renderItem) }\n                </ul>\n            </Fragment>\n        </Card>\n    )\n}\n\nCareer.propTypes = {\n    careers: PropTypes.array.isRequired\n}\n\nexport default Career;\n\n\n","import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types';\nimport { Card } from './component';\n\n\nconst renderItem = (item, index) => (\n    <li key={index}>\n        {item}\n    </li>\n)\n\nconst Skill = ({skills = []}) => {\n    return(\n        <Card className=\"skill\">\n            <Fragment>\n                <h2>Skills</h2>\n                <ul>{skills.map(renderItem)}</ul>\n            </Fragment>\n        </Card>\n    )\n}\n\nSkill.propTypes = {\n    skills: PropTypes.array\n}\n\nexport default Skill;","import React, {Fragment, useState} from 'react'\nimport { Card } from './component';\nimport { IoIosArrowDown, IoIosArrowUp } from 'react-icons/io'\n\nconst renderEtc = (etc) => (\n    <Fragment>\n        <h4 className=\"subtitle\">참고</h4>\n        <ul className=\"etc\">\n            {etc.map((item, index) => (<li key={index} ><a href={item}>{item}</a></li>))}\n        </ul>\n    </Fragment>\n)\n\nconst renderImg = (images) => (\n    <div className=\"image-container\">\n        {images.map((item, index) => (\n            <img key={index} src={item} alt=\"그림\" />\n        ))}\n    </div>\n)\n\nconst renderItem = (item, index) => {\n    return (\n        <li key={index}>\n            <h3 className=\"title\">{item.name}</h3>\n            <div>진행 기간 : {item.duration} </div>\n            <h4 className=\"subtitle\">내용</h4>\n            <div className=\"description\">{item.description}</div>\n            <h4 className=\"subtitle\">기여</h4>\n            <div className=\"description\">{item.contribution}</div>\n            <h4 className=\"subtitle\">사용 스킬 혹은 지식</h4>\n            <ul className=\"skills\">\n                {item.skills.map((item, index) => (<li key={index}>{item}</li>))}\n            </ul>\n            {item.images && renderImg(item.images)}\n            {item.etc && renderEtc(item.etc)}\n        </li>\n    )\n}\n\nconst Project = ({projects = []}) => {\n    const [fold, setFold] = useState(true);\n    let className = fold ? \"project fold\" : \"project\";\n    let icon = fold ? <IoIosArrowDown /> : <IoIosArrowUp />;\n    let iconDescription = fold ? \"펼치기\" : \"접기\";\n    return(\n        <Card className={className}>\n            <Fragment>\n                <header>\n                    <h2>Project</h2>\n                    <button onClick={() => setFold(!fold)}>{iconDescription}&nbsp;{icon}</button>\n                </header>\n                <ul>{projects.map(renderItem)}</ul>\n            </Fragment>\n        </Card>\n    )\n}\n\nexport default Project;","import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types';\nimport { Card } from './component';\n\n\nconst renderEtc = (etc) => (\n    <Fragment>료\n        <h4 className=\"subtitle\">발표 자료</h4>\n        <ul className=\"etc\">\n            {etc.map((item, index) => (<li key={index} ><a href={item}>{item}</a></li>))}\n        </ul>\n    </Fragment>\n)\n\nconst renderImg = (images) => (\n    <div className=\"image-container\">\n        {images.map((item, index) => (\n            <img key={index} src={item} alt=\"그림\" />\n        ))}\n    </div>\n)\n\nconst renderItem = (item, index) => (\n    <li key={index}>\n        <h3 className=\"title\">{item.name}</h3>\n        <div>진행 기간 : {item.duration} </div>\n        <h4 className=\"subtitle\">내용</h4>\n        <div className=\"description\">{item.description}</div>\n        <h4 className=\"subtitle\">기여</h4>\n        <div className=\"description\">{item.contribution}</div>\n        <h4 className=\"subtitle\">사용 스킬 혹은 지식</h4>\n        <ul className=\"skills\">\n            {item.skills.map((item, index) => (<li key={index}>{item}</li>))}\n        </ul>\n        {item.images && renderImg(item.images)}\n        {item.etc && renderEtc(item.etc)}\n    </li>\n)\n\nconst Presentation = ({presentations = []}) => {\n    return(\n        <Card className=\"presentation\">\n            <Fragment>\n                <h2>Presentation</h2>\n                <ul>{presentations.map(renderItem)}</ul>\n            </Fragment>\n        </Card>\n    )\n}\n\nPresentation.propTypes = {\n    presentations: PropTypes.array\n}\n\nexport default Presentation;","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types';\nimport { Card } from './component';\n\n\nconst renderItem = (item, index) => (\n    <li key={index}>\n        <div className=\"language\">\n            <div>{item.name}</div> \n            <div>{item.duration}</div>\n        </div>\n        <div className=\"description\">{item.description}</div>\n    </li>\n)\n\nconst Education = ({educations = []}) => {\n    return (\n        <Card className=\"education\">\n            <Fragment>\n                <h2>Education</h2>\n                <ul>\n                    {educations.map(renderItem) }\n                </ul>\n            </Fragment>\n        </Card>\n    )\n}\n\nEducation.propTypes = {\n    educations: PropTypes.array.isRequired\n}\n\nexport default Education;\n","const config = {\n    profile: {\n        githubAccountId: \"soohyeon13\",\n        profileImg: \"https://avatars1.githubusercontent.com/u/48516385?s=460&v=4\",\n        email: \"rlatngus6663@gmail.com\",\n        description: \"안드로이드 개발을 하고있습니다. 저의 목표는 '할수 있을까?' 라는 생각보다 '해보고 싶다!' 라는 설렘을 가질수 있는 개발자가 목표입니다. \",\n        github: \"https://github.com/soohyeon13\"\n    },\n    skills: [\n        \"Java\",\n        \"Kotlin\",\n        \"Android\",\n        \"Git\",\n    ],\n    careers: [\n        {\n            name: \"네이버 웹툰 인턴\",\n            duration: \"2020.07 ~ 2020.08\",\n            description: \"네이버 웹툰에서 2달간 인턴 경험이 있습니다. 인턴 과정에서 2개의 과제를 수행하였고 팀 워크, 개발할 때의 습관에 있어 많은 도움이 되었습니다.\"\n        },\n    ],\n    presentations: [\n        {\n            name: \"Kaggle 타이타닉 컴피티션 밋업\",\n            duration: \"2019.01 ~ 2019.03\",\n            description: \"캐글 코리아에서 주최하는 타이타닉 생존자 예측 컴피티션을 참가했습니다. 저희가 대회를 진행 하면서 데이터 분석 과정, 데이터 전처리과정, 모델링 과정 그리고 후기에 대해 데이터 사이언스에 관심이 많은 사람들을 모아 발표를 해보았습니다. 대회 제출까지 해보았고 350개 팀중 43등을 했습니다.\",\n            contribution: \"데이터 전처리 비어있는 데이터에 대한 분석과 과정과 모델링 알고리즘에 대한 분석을 하였습니다. \",\n            skills: [\"Python\", \"Pandas\", \"Sklearn\", \"SVM\",\"Random Forest\"],\n            images: [\"images/meetup/kaggle_competition.png\"],\n            etc: [\"https://docs.google.com/presentation/d/1q32RPaqaDXN7rXr7EnnPV7YZWVhqhoGYvIy0SP9NPlw/edit?ts=5c6e392a#slide=id.p1\"],\n        }\n    ],\n}\n\nexport default config;\n","import React, { Fragment } from 'react';\nimport '../styles/App.css';\nimport { Profile, Career, Skill, Project, Presentation, Education } from '.';\nimport config from '../config.js';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Profile \n        {...config.profile}\n      />\n      { config.skills && Array.isArray(config.skills) && <Skill skills={config.skills} />}\n      { config.educations && Array.isArray(config.educations) && <Education educations={config.educations} /> } \n      { config.careers && Array.isArray(config.careers) && <Career careers={config.careers} /> } \n      { config.presentations && Array.isArray(config.presentations) && <Presentation presentations={config.presentations} /> }\n      { config.projects && Array.isArray(config.projects) && <Project projects={config.projects} /> }\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport {App} from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}